---
---

<h2>tell us what you think</h2>

<form id="testimonial-form" action="">
    <div class="info-fields">
        <input type="text" name="name" value="" placeholder="Name..." id="name"/>
        <input type="email" name="email" value="" placeholder="E-mail..." id="email"/>
    </div>
    <textarea name="text" value="" placeholder="What do you think?" id="text"/>
    <input type="submit" name="submit" value="submit"/>
</form>

<script>
    // Define the Supabase URL where the testimonials will be stored
    const supabaseUrl = 'https://zmcyikxmiayuhgfwtsea.supabase.co/rest/v1/testimonials';

    // Define the Supabase API key
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InptY3lpa3htaWF5dWhnZnd0c2VhIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODIzMjc5NzgsImV4cCI6MTk5NzkwMzk3OH0.XEziRlwGxjmj3Xd6Y3hwWVW36m80dJSlqNRrXbWn-LQ';
    
    // Get the testimonial form element
    const form = document.querySelector('#testimonial-form');
    
    // Add a submit event listener to the form
    form.addEventListener('submit', async (e) => {
        // Prevent the default form submission behavior
        e.preventDefault();

        // Show an alert to the user
        alert('Thank you for your testimonial!');

        // Get the input values from the form
        const name = form.querySelector('#name').value;
        const text = form.querySelector('#text').value;
        const email = form.querySelector('#email').value;

        // Create an object with the input data
        const data = {
            name,
            email,
            text
        }

        // Send a POST request to the Supabase API to save the testimonial
        const response = await fetch(supabaseUrl, {
            method: 'POST',
            headers: {
                'apikey': supabaseKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });
    })

    // Add a second submit event listener to the form
    form.addEventListener('submit', async (e) => {

        // Prevent the default form submission behavior
        e.preventDefault();

        // Reset the form fields
        form.reset();
    })
    
</script>
<style>

    h2 {
        text-align: center;
        margin-bottom: 1rem;
    }

    form {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 45%;
        margin: 0 auto;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .info-fields {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: 1rem;
        width: 100%;
    }

    input {
        font-family: var(--bodytext-font);
        color: var(--main-font-color);
        border: solid 1px var(--border-color);
        padding: 0.5rem 0.5rem;
        width: 100%;
    }

    textarea {
        width: 100%;
        height: 140px;
        font-family: var(--bodytext-font);
        color: var(--main-font-color);
        border: solid 1px var(--border-color);
        padding: 0.5rem 0.5rem;
        resize: none;
        border-radius: 0;

    }

    input[type="submit"] {
        font-family: var(--heading-font);
        color: var(--background-color);
        background-color: var(--main-font-color);
        width: fit-content;
        margin-inline: auto;
        letter-spacing: 0.08em;
        cursor: pointer;
        border: none;
        padding: 0.6rem 1.2rem;
    }

    @media screen and (min-width: 700px) {
    .info-fields {
        flex-direction: row;
    }

</style>
